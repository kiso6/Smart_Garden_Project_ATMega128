
Quentin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000206  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000090e  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085e  00000000  00000000  00000c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f2  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001758  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043b  00000000  00000000  0000179c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000026  00000000  00000000  00001bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001bfd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	36 d0       	rcall	.+108    	; 0x106 <main>
  9a:	b3 c0       	rjmp	.+358    	; 0x202 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <lights>:
#include <avr/interrupt.h>

void lights(int SC_STATE)
{
	float DAY_NIGHT_LIMIT = 1; //to define
	if(SC_STATE == 4 && (255-ADCH)*255 < DAY_NIGHT_LIMIT)
  9e:	04 97       	sbiw	r24, 0x04	; 4
  a0:	d9 f4       	brne	.+54     	; 0xd8 <lights+0x3a>
  a2:	25 b1       	in	r18, 0x05	; 5
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	82 1b       	sub	r24, r18
  aa:	91 09       	sbc	r25, r1
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	28 9f       	mul	r18, r24
  b0:	b0 01       	movw	r22, r0
  b2:	29 9f       	mul	r18, r25
  b4:	70 0d       	add	r23, r0
  b6:	11 24       	eor	r1, r1
  b8:	07 2e       	mov	r0, r23
  ba:	00 0c       	add	r0, r0
  bc:	88 0b       	sbc	r24, r24
  be:	99 0b       	sbc	r25, r25
  c0:	41 d0       	rcall	.+130    	; 0x144 <__floatsisf>
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	40 e8       	ldi	r20, 0x80	; 128
  c8:	5f e3       	ldi	r21, 0x3F	; 63
  ca:	36 d0       	rcall	.+108    	; 0x138 <__cmpsf2>
  cc:	88 23       	and	r24, r24
  ce:	24 f4       	brge	.+8      	; 0xd8 <lights+0x3a>
	PORTB |= (1<<PB0);
  d0:	88 b3       	in	r24, 0x18	; 24
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	88 bb       	out	0x18, r24	; 24
  d6:	08 95       	ret
	else
	PORTB &= ~(1<<PB0);
  d8:	88 b3       	in	r24, 0x18	; 24
  da:	8e 7f       	andi	r24, 0xFE	; 254
  dc:	88 bb       	out	0x18, r24	; 24
  de:	08 95       	ret

000000e0 <ADC_init>:
}

void ADC_init() {
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Set ADC prescalar to 128 - 125KHz sample rate @ 16MHz
  e0:	86 b1       	in	r24, 0x06	; 6
  e2:	87 60       	ori	r24, 0x07	; 7
  e4:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1 << REFS0); // Set ADC reference to AVCC
  e6:	87 b1       	in	r24, 0x07	; 7
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1 << ADLAR); // Left adjust ADC result to allow easy 8 bit reading
  ec:	87 b1       	in	r24, 0x07	; 7
  ee:	80 62       	ori	r24, 0x20	; 32
  f0:	87 b9       	out	0x07, r24	; 7
	// No MUX values needed to be changed to use ADC0
	ADCSRA |= (1 << ADFR);  // Set ADC to Free-Running Mode
  f2:	86 b1       	in	r24, 0x06	; 6
  f4:	80 62       	ori	r24, 0x20	; 32
  f6:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADEN);  // Enable ADC
  f8:	86 b1       	in	r24, 0x06	; 6
  fa:	80 68       	ori	r24, 0x80	; 128
  fc:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADSC);  // Start A2D Conversions
  fe:	86 b1       	in	r24, 0x06	; 6
 100:	80 64       	ori	r24, 0x40	; 64
 102:	86 b9       	out	0x06, r24	; 6
 104:	08 95       	ret

00000106 <main>:
}

int main(void)
{
	DDRF = 0x00;
 106:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRB = 0x01;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	87 bb       	out	0x17, r24	; 23
	ADC_init();
 10e:	e8 df       	rcall	.-48     	; 0xe0 <ADC_init>
	
	int SC_STATE = 4; // value from the security module when the admin is present
	while (1) {
		if(1<<ADCSRA)
 110:	26 b1       	in	r18, 0x06	; 6
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <main+0x16>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	2a 95       	dec	r18
 11e:	e2 f7       	brpl	.-8      	; 0x118 <main+0x12>
 120:	89 2b       	or	r24, r25
 122:	19 f0       	breq	.+6      	; 0x12a <main+0x24>
		lights(SC_STATE);
 124:	84 e0       	ldi	r24, 0x04	; 4
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	ba df       	rcall	.-140    	; 0x9e <lights>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	8f e3       	ldi	r24, 0x3F	; 63
 12c:	9c e9       	ldi	r25, 0x9C	; 156
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <main+0x28>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x2e>
 134:	00 00       	nop
 136:	ec cf       	rjmp	.-40     	; 0x110 <main+0xa>

00000138 <__cmpsf2>:
 138:	40 d0       	rcall	.+128    	; 0x1ba <__fp_cmp>
 13a:	08 f4       	brcc	.+2      	; 0x13e <__cmpsf2+0x6>
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	08 95       	ret

00000140 <__floatunsisf>:
 140:	e8 94       	clt
 142:	09 c0       	rjmp	.+18     	; 0x156 <__floatsisf+0x12>

00000144 <__floatsisf>:
 144:	97 fb       	bst	r25, 7
 146:	3e f4       	brtc	.+14     	; 0x156 <__floatsisf+0x12>
 148:	90 95       	com	r25
 14a:	80 95       	com	r24
 14c:	70 95       	com	r23
 14e:	61 95       	neg	r22
 150:	7f 4f       	sbci	r23, 0xFF	; 255
 152:	8f 4f       	sbci	r24, 0xFF	; 255
 154:	9f 4f       	sbci	r25, 0xFF	; 255
 156:	99 23       	and	r25, r25
 158:	a9 f0       	breq	.+42     	; 0x184 <__floatsisf+0x40>
 15a:	f9 2f       	mov	r31, r25
 15c:	96 e9       	ldi	r25, 0x96	; 150
 15e:	bb 27       	eor	r27, r27
 160:	93 95       	inc	r25
 162:	f6 95       	lsr	r31
 164:	87 95       	ror	r24
 166:	77 95       	ror	r23
 168:	67 95       	ror	r22
 16a:	b7 95       	ror	r27
 16c:	f1 11       	cpse	r31, r1
 16e:	f8 cf       	rjmp	.-16     	; 0x160 <__floatsisf+0x1c>
 170:	fa f4       	brpl	.+62     	; 0x1b0 <__floatsisf+0x6c>
 172:	bb 0f       	add	r27, r27
 174:	11 f4       	brne	.+4      	; 0x17a <__floatsisf+0x36>
 176:	60 ff       	sbrs	r22, 0
 178:	1b c0       	rjmp	.+54     	; 0x1b0 <__floatsisf+0x6c>
 17a:	6f 5f       	subi	r22, 0xFF	; 255
 17c:	7f 4f       	sbci	r23, 0xFF	; 255
 17e:	8f 4f       	sbci	r24, 0xFF	; 255
 180:	9f 4f       	sbci	r25, 0xFF	; 255
 182:	16 c0       	rjmp	.+44     	; 0x1b0 <__floatsisf+0x6c>
 184:	88 23       	and	r24, r24
 186:	11 f0       	breq	.+4      	; 0x18c <__floatsisf+0x48>
 188:	96 e9       	ldi	r25, 0x96	; 150
 18a:	11 c0       	rjmp	.+34     	; 0x1ae <__floatsisf+0x6a>
 18c:	77 23       	and	r23, r23
 18e:	21 f0       	breq	.+8      	; 0x198 <__floatsisf+0x54>
 190:	9e e8       	ldi	r25, 0x8E	; 142
 192:	87 2f       	mov	r24, r23
 194:	76 2f       	mov	r23, r22
 196:	05 c0       	rjmp	.+10     	; 0x1a2 <__floatsisf+0x5e>
 198:	66 23       	and	r22, r22
 19a:	71 f0       	breq	.+28     	; 0x1b8 <__floatsisf+0x74>
 19c:	96 e8       	ldi	r25, 0x86	; 134
 19e:	86 2f       	mov	r24, r22
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	2a f0       	brmi	.+10     	; 0x1b0 <__floatsisf+0x6c>
 1a6:	9a 95       	dec	r25
 1a8:	66 0f       	add	r22, r22
 1aa:	77 1f       	adc	r23, r23
 1ac:	88 1f       	adc	r24, r24
 1ae:	da f7       	brpl	.-10     	; 0x1a6 <__floatsisf+0x62>
 1b0:	88 0f       	add	r24, r24
 1b2:	96 95       	lsr	r25
 1b4:	87 95       	ror	r24
 1b6:	97 f9       	bld	r25, 7
 1b8:	08 95       	ret

000001ba <__fp_cmp>:
 1ba:	99 0f       	add	r25, r25
 1bc:	00 08       	sbc	r0, r0
 1be:	55 0f       	add	r21, r21
 1c0:	aa 0b       	sbc	r26, r26
 1c2:	e0 e8       	ldi	r30, 0x80	; 128
 1c4:	fe ef       	ldi	r31, 0xFE	; 254
 1c6:	16 16       	cp	r1, r22
 1c8:	17 06       	cpc	r1, r23
 1ca:	e8 07       	cpc	r30, r24
 1cc:	f9 07       	cpc	r31, r25
 1ce:	c0 f0       	brcs	.+48     	; 0x200 <__fp_cmp+0x46>
 1d0:	12 16       	cp	r1, r18
 1d2:	13 06       	cpc	r1, r19
 1d4:	e4 07       	cpc	r30, r20
 1d6:	f5 07       	cpc	r31, r21
 1d8:	98 f0       	brcs	.+38     	; 0x200 <__fp_cmp+0x46>
 1da:	62 1b       	sub	r22, r18
 1dc:	73 0b       	sbc	r23, r19
 1de:	84 0b       	sbc	r24, r20
 1e0:	95 0b       	sbc	r25, r21
 1e2:	39 f4       	brne	.+14     	; 0x1f2 <__fp_cmp+0x38>
 1e4:	0a 26       	eor	r0, r26
 1e6:	61 f0       	breq	.+24     	; 0x200 <__fp_cmp+0x46>
 1e8:	23 2b       	or	r18, r19
 1ea:	24 2b       	or	r18, r20
 1ec:	25 2b       	or	r18, r21
 1ee:	21 f4       	brne	.+8      	; 0x1f8 <__fp_cmp+0x3e>
 1f0:	08 95       	ret
 1f2:	0a 26       	eor	r0, r26
 1f4:	09 f4       	brne	.+2      	; 0x1f8 <__fp_cmp+0x3e>
 1f6:	a1 40       	sbci	r26, 0x01	; 1
 1f8:	a6 95       	lsr	r26
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	81 1d       	adc	r24, r1
 1fe:	81 1d       	adc	r24, r1
 200:	08 95       	ret

00000202 <_exit>:
 202:	f8 94       	cli

00000204 <__stop_program>:
 204:	ff cf       	rjmp	.-2      	; 0x204 <__stop_program>
